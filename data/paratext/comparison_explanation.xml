<?xml version="1.0" encoding="UTF-8"?>
<TEI version="5.0" xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title type="main">How do you create the line comparisons?</title>
                <editor>
                    <persName xml:id="medavis">
                        <surname>Davis</surname>
                        <forename sort="1">Matthew</forename>
                        <forename sort="2">Evan</forename>
                    </persName>
                </editor>
            </titleStmt>
            <publicationStmt>
                <publisher/>
                <pubPlace/>
                <availability status="free">
                    <licence target="http://creativecommons.org/licenses/by-nc-sa/4.0/">
                        <p>
                            <graphic url="http://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"/>
                            This work is licensed under a <ref
                                target="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative
                                Commons Attribution-NonCommercial-ShareAlike 4.0 International
                                License.</ref>
                        </p>
                    </licence>
                </availability>
                <date/>
            </publicationStmt>
            <sourceDesc xml:id="comparison_explanation.html">
                <bibl>Information about and link to the code for line comparisons.</bibl>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <head type="subhead">Preparing the XQuery</head>
            <p>The TEI files for this site use the <code xml:id="xml">&lt;sourceDoc&gt;</code> based schema from
                the Text Encoding Initiative, rather than the more common default
                <code xml:id="xml">&lt;text&gt;</code> based schema. So my code for a single stanza of a poem
                will look like this:</p>
     
                <code n="multiline" xml:id="xml"> 
&lt;surfaceGrp xml:id=“f.75” n=“folio”&gt; 
  &lt;surface n=“recto”&gt; 
      &lt;label&gt;Folio 75 Recto&lt;/label&gt; 
      &lt;graphic url=“St_John_56_75r.jpg”/&gt;
      &lt;zone n=“EETS.QD.16”&gt;
          &lt;line n=“l.1”&gt; He myght be called / eleazar the secunde &#x61b; &lt;/line&gt; 
          &lt;line n=“l.2”&gt; The chamnpyoun / moost myghty and notable &#x61b; &lt;/line&gt; 
          &lt;line n=“l.3”&gt; That yaff the olyfaunt / hy laste his laste mortall wounde &#x61b; &lt;/line&gt; 
          &lt;line n=“l.4”&gt; Machabeo&lt;ex&gt;rum&lt;/ex&gt; / this story ys no fablee &#x61b; &lt;/line&gt;
          &lt;line n=“l.5”&gt; And hercules / in his conquest stable &#x61b; &lt;/line&gt;
          &lt;line n=“l.6”&gt; Bar vp the heuenys / in his humanytee &#x61b; &lt;/line&gt;
          &lt;line n=“l.7”&gt; Ffor whom ony sorowes / wer maad moost lamentable &#x61b; &lt;/line&gt; 
          &lt;line n=“l.8”&gt; Whan I be hylde hym / þus nayled to atree &#x61b; &lt;/line&gt; 
      &lt;/zone&gt; 
      […]
  &lt;/surface&gt; 
&lt;/surfaceGrp&gt;
                </code>
            
            <p>One of my concerns about markup of text is that it can get so busy describing the
                text so machines can read it that it ceases to be readable by people. So I have
                tried to have the minimum amount of markup necessary to fit the rules of TEI while
                recording the structure and features of the poem as it exists in the witness. That’s
                what the <code xml:id="xml">@xml:id</code> and <code xml:id="xml">@n</code> attributes are doing above.
                They’re letting the machine know that this is folio 75 of the book in question. The
                <code xml:id="xml">&lt;surfaceGrp&gt;</code> is a single page of the book, front and back.
                The <code xml:id="xml">&lt;surface&gt;</code> is the particular side of the page in
                question—recto or verso. From there, we label the particular surface in a
                people-friendly way that’ll display on the site and provide the link to the
                image.</p>
            <p>This begs the question of why <code xml:id="xml">&lt;zone&gt;</code> and <code xml:id="xml">
                &lt;line&gt;</code> are necessary. <code xml:id="xml">&lt;line&gt;</code>, I suspect, is
                relatively self-evident, and <code xml:id="xml">&lt;zone&gt;</code> is the actual stanza in
                question. Unlike some poems that have extensive critical histories, there’s not a
                canonical numbering system for many of these poems, so what I’ve done here is
                provide a two-part system. The first part, the zone, is the actual stanza in
                question based on what’s considered the critical edition of the work – in this case
                    <emph rend="italic">The Minor Poems of John Lydgate</emph> (Early English Text
                Society early series 107). That gets abbreviated to EETS e.s. 107, and which is
                where I get the EETS in the <code xml:id="xml">@n</code> attribute under
                <code xml:id="xml">&lt;zone&gt;</code>. The “QD” refers to the the initials of the title of
                the poem as it appears in that book, and the number is the number of the stanza in
                the poem. So what the <code xml:id="xml">@n</code> attribute in <code xml:id="xml">&lt;zone&gt;</code> is
                doing is explaining where the actual stanza is in relation to the poem in the EETS
                volume. That doesn’t mean it’s necessarily where it is in the actual book the
                witness is taken from. That’s handled by the folio reference in the
                <code xml:id="xml">&lt;surfaceGrp&gt;</code> element. Also, once I have finalized images for
                all the texts, I’ll include code to give the dimensions of the zone on the image, so
                it can be highlighted, but that’s for the future.</p>
            <p>&lt;line&gt; functions in much the same way. There are eight lines per zone, just as
                there are eight lines per stanza in this poem, so the <code xml:id="xml">@n</code> there refers
                to the particular line of the eight – again using the EETS edition as a signpost
                (it’s “l.x” rather than just “x” because of a limitation of TEI – you can’t have
                solely numeric <code xml:id="xml">@n</code> attributes in the <code xml:id="xml">&lt;line&gt;</code> element).</p>
            <head type="subhead">XQuery Part I: the Comparison Feature</head>
            <p> The underlying structure mentioned above is what makes the line comparison
                relatively simple. Because of the <code xml:id="xml">@n</code> attributes identifying both the
                verse and the line in question, a  
                <ref target="/XML/XQuery/test.xq">script</ref> can be written using <ref
                    target="https://en.wikipedia.org/wiki/XQuery">XQuery</ref> that will easily grab
                the appropriate analogues whenever they exist:</p>

                <code n="multiline" xml:id="xquery"> 
let $q:=collection(‘file:/users/matt/Documents/tei/Lydgate/Quis_Dabit?select=*.xml’)

  for $y in $q 
  let $s := $y//tei:surface 
  let $t := $y//tei:titleStmt/@xml:id 
  let $m := $y//tei:msDesc/@xml:id 
  let $z := $s/tei:zone[@n=“EETS.QD.4”] 
  let $l := $z/tei:line[@n=“l.1”] 
  let $w := concat($y//tei:msDesc/tei:msIdentifier/tei:settlement/text(),',',$y//tei:msDesc/tei:msIdentifier/tei:institution/text(),' ',$y//tei:msDesc/tei:msIdentifier/tei:idno/text()) 
  let $g := concat($t, “/” ,$m, “/”, substring-before($l/../../tei:graphic/@url,“.”),“.html”) 
  let $o := local:remove-elements($l, $remove-list) 
    where ($z//tei:line/@n = “l.1”) 
      return
        &lt;item&gt; 
          &lt;ref target=“{$g}”&gt;{$o}&lt;/ref&gt; 
        &lt;/item&gt; 
                </code>
            
            <p>I realize that to the uninitiated this may appear to be gibberish, but it's actually
                quite simple:</p>
                <code n="multiline" xml:id="xquery"> 
let $q:=collection('file:/users/matt/Documents/tei/Lydgate/Quis_Dabit?select=*.xml’)
                </code>
            <p>This is a variable that invokes XQuery’s collection function. In this case, it is
                pointing to a folder on my desktop, but in the live version it points to the folder
                where the xml for particular texts are located. The *.xml at the end tells it to
                grab everything with the filename extension “xml” in that folder.</p>
            <p><code xml:id="xquery">collection()</code> basically puts all the documents together one after the
                other, so that what was a series of small seperate tree structures now has an
                overarching root connecting them. I need to be able to walk through that root to
                grab the individual items.</p>
            <p><code xml:id="xquery">for $y in $q</code> lets me do that. The code is stating that for each of the
                items(<code xml:id="xquery">$y</code>) that have been connected in the collection
                (<code xml:id="xquery">$q</code>), return some information. That information is identified via
                the series of <code xml:id="xquery">$let</code> declarations. These mean exactly what they sound
                like: let whatever variable (<code xml:id="xquery">$x</code>
                <code xml:id="xquery">$y</code>, etc.) = whatever is after the := symbol. So in this case
                <code xml:id="xquery">$s</code> invokes all the surfaces in question, <code>$w</code> grabs the
                holding institution and shelfmark of the volume by combining a number of elements in
                the TEI, <code xml:id="xquery">$g</code> grabs the url information from the graphic and generates a
                hyperlink so that the result can link back to the original item (this time by
                combining the element with static text), <code xml:id="xquery">$z</code> is the zone information
                with the limitation of a particular stanza, and <code xml:id="xquery">$l</code> is the particular
                line. <code xml:id="xquery">$o</code> is the actual text from the particular witnesses, run through
                another function that I will explain the reason for shortly.</p>
            <p>Once all the information is defined via the <code xml:id="xquery">let</code> statements, the text
                needs to be filtered from the entire poem to the single line the viewer wishes to
                compare. This is handed by the <code xml:id="xquery">where</code> clause, which is saying that out
                of all the <code xml:id="xml">&lt;line&gt;</code>s in the <code xml:id="xml">&lt;zone&gt;</code> (which is
                already constrained by the <code xml:id="xml">@n</code> attribute) we want only the information
                for line l.1.</p>
            <head type="subhead">XQuery Part II: Functions</head>
            <p>Before getting to what is actually returned by this code, a moment to talk about what
                the <code xml:id="xquery">local:remove-elements</code> above means. XQuery is what is called a <ref
                    target="https://en.wikipedia.org/wiki/Functional_programming">functional
                    programming language</ref>. While the link will go into depth on what precisely
                that means, for practical purposes a function is a piece of code written once,
                encapsulating multiple lines of code into a single reference that can be called to
                again and again. This can be useful for a number of reasons that you can find more
                information about <ref
                    target="https://www.cs.utah.edu/~germain/PPS/Topics/functions.html">here</ref>,
                but in the case of this project the reason the function was written was primarily
                for recursion. The full code of the <code xml:id="xquery">local:remove-elements</code> function is
                as follows:</p>
            <code n="multiline" xml:id="xquery"> 
declare function local:remove-elements($input as element(), $remove-names as xs:string*) as element() { 
  element {node-name($input) } 
    {$input/@*,
     for $child in $input/node()[not(name(.)=$remove-names)] 
       return 
         if ($child instance of element()) 
           then local:remove-elements($child, $remove-names) 
         else $child 
    } 
}; 
            </code>
            <p>The function is first defined through the <code xml:id="xquery">declare</code> statement. This lets
                the engine that's running the xquery know that this is a function rather than a
                piece of code to be run immediately. the <code xml:id="xquery">local</code> that prefaces the
                <code xml:id="xquery">remove-elements</code> references the local <ref
                    target="https://en.wikipedia.org/wiki/Namespace">namespace</ref>, while
                remove-elements is the name of the function. You'll note that the function takes two
                variables (the items in paranthesis): an XML <ref
                    target="https://www.w3schools.com/xml/xml_elements.asp">element</ref> and a <ref
                    target="https://en.wikipedia.org/wiki/String_(computer_science)">string</ref>.
                The <code xml:id="xquery">xs</code> prefacing string is another reference to a namespace -- in this
                case the namespace for the XML data model.</p>
            <p>So far, all of this has simply been defining the function. The actual code generated
                begins on the next line. <code xml:id="xquery">element</code>, here, is what is referred to as a
                    <ref
                    target="http://blog.davidcassel.net/2011/10/element-constructors-computed-and-direct/"
                    >computed constructor</ref>. All this means is that it's creating the element to
                be returned computationally, rather than through a direct declaration of the
                element. <code xml:id="xquery">node-name($input)</code> lets the Saxon engine know that we're only
                interested in the name of the element at this point, rather than the element and its
                contents. Now that the new element is declared, the block of code in the curly
                brackets is executed. <code xml:id="xquery">$input/@*</code> says to grab everything in the old
                element, go through each child of that element and return it as a child element
                    <emph rend="italic">except</emph> for those items including in the list above
                (<code xml:id="xquery">for $child in $input/node()[not(name(.)=$remove-names)]</code>). The
                comma simply serves as a way to indicate what is the input and what's to be
                executed.</p>
            <p>After it's gone through all the child elements in the orignal inputted element, the
                <code xml:id="xquery">return</code> statement indicates that the children are to be added to the
                newly created element, but there's a condition in place. The if/then statement
                serves as a check to make sure that there are no children of those child
                elements. <code xml:id="xquery">if ($child instance of element())</code> tells the Saxon engine
                to check if there are children of this child node. <code xml:id="xquery">then
                    local:remove-elements($child, $remove-names)</code> tells it to run the function
                again for that child if there are. This is the primary reason this bit of code needs
                to be written as a function—so it can recurse through the various children of an
                element, catch them all, and apply itself to each until it reaches a child element
                that has no children in turn. Once it's done that, it attaches that child element to
                the newly-created element and the whole package is returned to us. This is useful,
                for example, if I have multiple <code xml:id="xml">note</code> elements attached to a single
                    <code xml:id="xml">line</code> element, as the code will go through and remove each of them
                in turn.</p>
            <head type="subhead">Getting the results</head>
            <p>Much like with the function, the information after <code xml:id="xquery">return</code> in the larger
                code sample shows the format of what this code will spit out: a set of tei-formatted
                lines, each stating the particular book in question’s location and shelfmark, a
                hyperlink back to the original page the line can be found on, and the actual text in
                question. Altogether, running it will look like this:</p>

                <code n="multiline" xml:id="xml"> 
&lt;item&gt; London, British Library Harley 2251: 
  &lt;ref target=“.html”&gt;O alle ye doughtres · of Jerusalem&lt;/ref&gt; 
&lt;/item&gt;
&lt;item&gt; London, British Library Harley 2255: 
  &lt;ref target=“.html”&gt; &lt;hi rend=“blue_pilcrow”&gt;¶&lt;/hi&gt;O alle ye douħtren of &lt;hi rend=“underline”&gt;ierusaleem&lt;/hi&gt;&lt;/ref&gt;
&lt;/item&gt;
&lt;item&gt; Long Melford, Holy Trinity Church Clopton Chantry Chapel: 
  &lt;ref target=“.html”&gt; &lt;hi&gt;O&lt;/hi&gt; alle ye &lt;gap quantity=“8” unit=“chars” reason=“illegible”/&gt;s of ierusaleem&lt;/ref&gt; 
&lt;/item&gt;
&lt;item&gt; Cambridge, Jesus College Q.G.8: 
  &lt;ref target=“.html”&gt; &lt;hi&gt;A&lt;/hi&gt;ll the &lt;hi rend=“underline”&gt;doughtren &lt;/hi&gt;of &lt;hi rend=“underline”&gt; Ierusalem&lt;/hi&gt; . &lt;/ref&gt; 
&lt;/item&gt;
&lt;item&gt; Oxford, Bodleian Library Laud 683: 
  &lt;ref target=“.html”&gt;O alle ẏe douhtren of jerusaleem&lt;/ref&gt; 
&lt;/item&gt; 
&lt;item&gt; Oxford, St. John’s College 56: 
  &lt;ref target=“.html”&gt;O alle the doughtren / of Jerusalem ؛&lt;/ref&gt; 
&lt;/item&gt; 
                </code>
            <p>Which is ready to be styled by <ref target="https://en.wikipedia.org/wiki/XSLT"
                    >XSLT</ref> as soon as it’s either embedded in an existing page or has the rest
                of the TEI wrapper built around it.</p>
            <head type="subhead">Running the XQuery</head>
            <p>The actual running of this XQuery has to be done by the <ref
                    target="http://saxon.sourceforge.net">Saxon</ref> XSLT/XQuery processor. That
                process needs to be called either on the server or locally on the viewer's machine.
                Since the viewer may not have the Saxon processor installed, it occurs on the server
                using a piece of PHP code. Unfortunately, the necessary files to connect that PHP
                code with the Saxon installation natively are not available due to a corrupt
                installation file on the Saxon site. A command line version of the program is
                available, however, and runs with the following command:</p>

                <code n="multiline" xml:id="shell"> 
java -cp saxon9he.jar net.sf.saxon.Query -t -q:test.xq
                </code>
            
            <p>This means that a call to the external program from a php page has to be made,
                requiring this piece of code:</p>

                <code n="multiline" xml:id="php"> 
$text = exec (“java -cp saxon9he.jar net.sf.saxon.Query -t -q:test.xq -line=$line zone=$zone collection=file:$collection”);
                </code>
            <p>This works fine, and the results are stored as <code>$text</code>. But they’re still
                formatted as the xml string shown above, not as html that can be understood by the
                web without a lot of extra work. What needs to happen to make it easily readable by
                a web server is that it needs to be styled either with XQuery or with XSLT. Of the
                two, XSLT makes a whole lot more sense – that’s what it’s designed for, whereas
                XQuery is really designed as a query langauge to use xml files as a database.</p>
            <p>PHP has its own XSLT parser, which can be invoked like this:</p>

                <code n="multiline" xml:id="php"> 
$xml = new DOMDocument; 
$xml->loadXML($text); 
$xsl = new DOMDocument; 
$xsl->load(‘comparison.xsl’); // Configure the transformer 
$proc = new XSLTProcessor; 
$proc->importStyleSheet($xsl); // attach the xsl rules 
echo $proc->transformToXML($xml); 
                </code>
            <p>What this does is create a new object within php, load it with the xml we just
                finished creating, load a <ref target="/XML/XQuery/comparison.xsl">stylesheet</ref>
                to style said xml, and then attach the stylesheet to the xml. Finally, the result of
                the transformation is returned to the screen via the echo command. It works really
                well in most cases. The problem is that my xsl stylesheet has this piece of code in
                it:</p>
            <code n="multiline" xml:id="xml"> 
&lt;xsl:variable name=“max” select=“@quantity”/&gt;
&lt;xsl:for-each select=“1 to $max”&gt; 
  &lt;xsl:text&gt;.&lt;/xsl:text&gt;
&lt;/xsl:for-each&gt; 
            </code>
            <p>That code makes sure that any time there’s a gap due to damage, the likely number of
                characters (taken either from what’s left of the letters or from the critical text,
                EETS e.s. 107) is reduced to a number of dots, indicating that it’s not just a blank
                space. The way I do that is through an xml attribute called <code xml:id="xml">@quantity</code>
                and a <code xml:id="xml">for-each</code> loop that prints dots until the the system's internal
                counter matches <code xml:id="xml">@quantity</code>. That functionality with a
                <code xml:id="xml">for-each</code> loop is an XSLT 2.0 bit of code, since philosophically
                XSLT generally eschews such loops in favor of their native
                <code xml:id="xml">&lt;xsl:apply-templates&gt;</code> function. The native php XSLT parser is
                1.0. It will not handle this code.</p>
            <p>But!</p>
            <p>Good old Saxon <ex>will</ex> handle XSLT 2.0, but we have no php-native XSLT parser
                for Saxon. So a second external call to the command line is made:</p>

                <code n="multiline" xml:id="php"> 
$transform = exec (“java -jar saxon9he.jar -s:$filename -xsl:comparison.xsl -o:$html”);
                </code>
            
            <p>Notice, though, that that command has a <code xml:id="php">$filename</code> variable. The parser
                won’t easily just take the string we had before, so now instead of keeping the
                result in memory it needs to be written to a file, which is then read by the Saxon
                XSLT 2.0 parser in the command above. Once it does so it transforms the xml into
                html, which should be able to be displayed via a php <code xml:id="php">echo</code> statement.
                However, that doesn’t work, so it’s written to another file named by the variable
                <code xml:id="php">$html</code>.</p>
            <p>Now, to actually display the information, we need to go back to the command line and
                grab that html file:</p>

                <code n="multiline" xml:id="php"> 
$test = file_get_contents($html);
                </code>
            
            <p>and then display the results:</p>

                <code n="multiline" xml:id="php"> 
echo $test;
                </code>
            
            <p>This is what you actually see when you click on the blue dot to the right of the line
                and the box opens up – the contents of <code xml:id="php">$test</code>. It’s not as simple as
                just clicking on the dot, though. Clicking on that dot calls some javascript.
                Javascript has to be used because you’re changing something locally when you click
                on the dot and javascript is a client-side scripting language.</p>
            <p>The javascript passes the line, zone (here represented as <code xml:id="javascript">id</code>), and
                collection characteristics to the php code via this function:</p>

                <code n="multiline" xml:id="javascript"> 
function compare_toggle_visibility(id, line, collection) { 
  var e = document.getElementById(id); 
  e.style.display = ((e.style.display!='none’) ? 'none’ : 'block’ ); 
  $(e).html(“Loading Comparison…”);
  $.get(’/XML/XQuery/test_command_line.php’+ ’?collection=’ + collection + ’&amp;zone=’ + id + ’&amp;line=’ + line, 
    function(responseTxt){$(e).html(responseTxt); }); 
} </code>
            <p>What this does is first check to see which element in the html code has the
                <code xml:id="javascript">@id</code> attribute. It then checks to see if it has the style attribute
                ‘<code xml:id="css">display:none</code>’ (indicating it should not be displayed) and switches
                it to ‘<code xml:id="css">display:block</code>’ if it does. That’s what allows the box to “open
                up” and become visible. Having done that, it then puts some text into that box so
                that you know that work is being done, and finally it loads the php page and sends
                the results of that php page to the box. Clicking on the dot again will close the
                box back up (and at this point re-runs the code pointlessly – that’s something I
                need to fix). </p>
            <p>On the php side, the three variables are passed to the php through a
                <code xml:id="php">[$_get]</code> statement (which grabs the appropriate value from the uri
                passed to php)</p>
                <code n="multiline" xml:id="php"> 
$line=htmlspecialchars($_GET[“line”]);
$zone=htmlspecialchars($_GET[“zone”]);
$collection=htmlspecialchars($_GET[“collection”]); 
                </code>
            <p>and the code is processed as explained above. However, since there’s the possiblity
                of multiple people accessing the same lines at similar times we can’t have filenames
                that stay the same – they’d be overwritten. Instead, dynamic filenames need to be
                created. I do this by generating a random number and attaching it to the machine’s
                timestamp, then creating two variables based on that number with the extensions
                <code xml:id="shell">.html</code> and <code xml:id="shell">.xml</code>.</p>
            <code n="multiline" xml:id="php"> 
$unique=microtime(true) . mt_rand(1,5000000000);
$filename=$unique . “.xml”; $html=$unique . “.html”; 
            </code>
            <p>After the code has executed, I then clean up these files so there isn’t a bunch of
                randomly named files cluttering up my machine:</p>
            <code n="multiline" xml:id="php"> 
unlink($filename); 
unlink($html); 
            </code>
            
            <p>The unforunate effect of this constant call back and forth to the command line is a
                lag on the display of the comparison items, but my hope is that the Saxon php
                installer will be repaired and I can streamline it with the more integrated
                code.</p>
        </body>
    </text>
</TEI>
